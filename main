/*
 * LineFollower.c
 *
 * Created: 04/11/2015 06:40:05 a. m.
 *  Author: JLB
 */ 


#include <avr/io.h>
#include <util/delay.h>

#include "ADC.h"
#include "LEDs.h"
#include "Motors.h"
#include "LCD_4Bit.h"




//Gloabal varriables
float s;
float pGain = 150;	//Proportional Gain=200 
float iGain =  0.2;	//Integral Gain=0.2
float dGain =  100;	//Differential Gain=120

int32_t eInteg = 0;	//Integral accumulator
int32_t ePrev  =0;		//Previous Error

float control;

//*****************************************
//Solution2
typedef struct {
	double windup_guard;
	double proportional_gain;
	double integral_gain;
	double derivative_gain;
	double prev_error;
	double int_error;
	double control;
} PID;

//Solution2
void pid_zeroize(PID* pid) {
	// set prev and integrated error to zero
	pid->prev_error = 0;
	pid->int_error = 0;
}

//Solution2
void pid_update(PID* pid, double curr_error, double dt) {
	double diff;
	double p_term;
	double i_term;
	double d_term;
	
	// integration with windup guarding
	pid->int_error += (curr_error * dt);
	if (pid->int_error < -(pid->windup_guard))
	pid->int_error = -(pid->windup_guard);
	else if (pid->int_error > pid->windup_guard)
	pid->int_error = pid->windup_guard;
	
	// differentiation
	diff = ((curr_error - pid->prev_error) / dt);
	
	// scaling
	p_term = (pid->proportional_gain * curr_error);
	i_term = (pid->integral_gain     * pid->int_error);
	d_term = (pid->derivative_gain   * diff);
	
	// summation of terms
	pid->control = p_term + i_term + d_term;
	
	// save current error as previous error for next iteration
	pid->prev_error = curr_error;
}




//Implements PID control
float PID_2(float cur_value,float req_value)
{
	float pid;
	float error;

	error = req_value - cur_value;
	pid = (pGain * error)  + (iGain * eInteg) + (dGain * (error - ePrev));

	eInteg += error;                  // integral is simply a summation over time
	ePrev = error;                    // save previous for derivative

	return pid;
}




int main(void)
{
	
	DDRD = 0xff;
	
	DDRC=0X00;
	//Initialize LED subsystem
	LEDInit();
	Test_LEDs();
	
	
	
	//Initialize Motors
	Motors_init();
	
	//Initialize Analog to Digital Converter (ADC)
	ADC_init();

     lcd_init();
	 
	//Previous Sensor Reading
	float sprev=0.0;
	
    while(1)
    {
		
		
		lcd_col_row(1,1);
		lcd_write_integer(ReadADC(0) );
		
		
		
        //Take current sensor reading
        //return value is between 1 to 6
        //When the line is towards right of center then value tends to 6
        //When the line is towards left of center then value tends to 1
        //When line is in the exact center the the value is 2.5
        s=ReadSensors();
		
		//If line is not found beneath any sensor, use last sensor value.
		if(s==0xFF)
		{
			s=sprev;
		}
		
		//PID Algorithm generates a control variable from the current value
		//and the required value. Since the aim is to keep the line always
		//beneath the center sensor so the required value is 2.5 (second parameter)
		//The first argument is the current sensor reading.
		//The more the difference between the two greater is the control variable.
		//This control variable is used to produce turning in the robot.
		//When current value is close to required value is close to 0.
		control = PID_2(s,3.5);
		
		//Limit the control
		if(control > 510)
		control = 510;
		if(control < -510)
		control = -510;

		if(control >= 0.0)//the left sensor sees the line so we must turn right
		{
			if(control>255) 
			Motor_LEFT(MOTOR_BACKWARD,control-255); 
			else
			Motor_LEFT(MOTOR_FORWARD,255-control);
			
			Motor_RIGHT(MOTOR_BACKWARD,255);
		}
		if(control <= 0.0)//the right sensor sees the line so we must turn left
		{
			if(control<-255)
			Motor_RIGHT(MOTOR_FORWARD,-(control+255));//255
			else
			Motor_RIGHT(MOTOR_BACKWARD,255+control);//255
			
			Motor_LEFT(MOTOR_FORWARD,255);//255
		}
	
		sprev=s;
		
    }
}
